/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EmoTagsTitler
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_path = require("path");
var emojiDetectRegex = /(\p{Emoji_Presentation}|\p{Emoji}\uFE0F)/gu;
var emojiReplaceRegex = /^(\p{Emoji_Presentation}|\p{Emoji}\uFE0F)+\s*/gu;
function addTagsEmojiToTitle(file) {
  var _a, _b;
  const tags = this.app.metadataCache.getFileCache(file).tags;
  if (file.parent == null)
    return;
  const dir = file.parent.path;
  const noteTitle = file.basename;
  if (tags) {
    let emojis = [];
    for (const tag of tags) {
      const tagName = tag.tag;
      if (emojiDetectRegex.test(tagName)) {
        let tagEmojis = Array.from((_a = tagName.match(emojiDetectRegex)) != null ? _a : []);
        tagEmojis = tagEmojis.filter((element) => !emojis.includes(element));
        emojis = [...emojis, ...tagEmojis];
      }
    }
    const noteTitleWithoutEmoji = noteTitle.replace(emojiReplaceRegex, "");
    if (emojis.length > 0) {
      const emojiHeader = (_b = emojis == null ? void 0 : emojis.join("")) != null ? _b : "";
      const newNoteTitle = emojiHeader + " " + noteTitleWithoutEmoji;
      this.app.fileManager.renameFile(file, (0, import_path.join)(dir, newNoteTitle + ".md"));
    }
  } else {
    let newNoteTitle = noteTitle.replace(emojiDetectRegex, "");
    newNoteTitle = newNoteTitle.trim();
    this.app.fileManager.renameFile(file, (0, import_path.join)(dir, newNoteTitle + ".md"));
  }
}
function addEmojisToAllNotes() {
  const files = this.app.vault.getMarkdownFiles();
  for (const file of files) {
    addTagsEmojiToTitle(file);
  }
}
function removeTagsEmojiFromTitle(note) {
  var _a;
  const tags = this.app.metadataCache.getFileCache(note).tags;
  if (note.parent == null)
    return;
  const dir = note.parent.path;
  let noteTitle = note.basename;
  if (tags) {
    for (const tag of tags) {
      const tagName = tag.tag;
      if (emojiDetectRegex.test(tagName)) {
        const tagEmojis = Array.from((_a = tagName.match(emojiDetectRegex)) != null ? _a : []);
        for (const emoji of tagEmojis) {
          noteTitle = noteTitle.replace(emoji, "");
        }
      }
    }
    noteTitle = noteTitle.trim();
    this.app.fileManager.renameFile(note, (0, import_path.join)(dir, noteTitle + ".md"));
  }
}
function removeEmojisFromAllNotes() {
  const files = this.app.vault.getMarkdownFiles();
  for (const file of files) {
    removeTagsEmojiFromTitle(file);
  }
}
var EmoTagsTitler = class extends import_obsidian.Plugin {
  // Define a method to run when your plugin is loaded
  async onload() {
    this.registerEvent(
      this.app.metadataCache.on("changed", addTagsEmojiToTitle.bind(this))
    );
    this.addCommand({
      id: "add-emojis-to-all-notes",
      name: "Add emojis to the titles of all notes that have emoji tags",
      callback: () => {
        addEmojisToAllNotes();
      }
    });
    this.addCommand({
      id: "remove-emojis-from-all-notes",
      name: "Remove emojis from the titles of all notes",
      callback: () => {
        removeEmojisFromAllNotes();
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
